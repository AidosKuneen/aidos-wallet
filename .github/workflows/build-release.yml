name: Release
on:
  push:
    tags:
      - v*
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.ref }} release, see the changelog for more details.
          draft: false
          prerelease: false
  linux-build:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: |
          node --version
          yarn --version
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build
        run: |
          yarn install
          pushd ccurl
          rm mac/libccurl.dylib
          rm lin64/libccurl.so
          gcc -shared -o libccurl.so libccurl.cpp -O3 -lpthread -fPIC -std=c++11
          mkdir -p lin64
          cp libccurl.so lin64/
          rm libccurl.so
          popd
          yarn run publish:lin
          find out
      # TODO Upload release asset
  osx-build:
    needs: release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: |
          node --version
          yarn --version
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build
        run: |
          yarn install
          pushd ccurl
          rm mac/libccurl.dylib
          rm lin64/libccurl.so
          gcc -dynamiclib -o libccurl.dylib libccurl.cpp -O3 -lpthread -std=c++11
          mkdir -p mac
          cp libccurl.dylib mac/
          rm libccurl.dylib
          popd
          yarn run publish:mac
          find out
      # TODO Upload release asset
  windows-build:
    needs: release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      # TODO Implement
      # TODO Upload release asset
